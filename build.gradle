plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'


    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version

    boolean publishMavenRelease = System.getenv("PUBLISH_MAVEN_RELEASE") == "true"
    String buildNum = System.getenv('BUILD_NUMBER')
    if (!publishMavenRelease && buildNum != null) {
        version += "-" + buildNum
    }
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
        }
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }


}

ext.trimChangelog = { changelogString ->
    String changelogSec = ""
    def lines = changelogString.split("\n")
    Boolean going = false;
    for (String line : lines){
        if (line.startsWith("##") && !line.startsWith("###")){
            if(going)
                break
            going = true;
        }
        if(going){
            changelogSec += (line + "\n")
        }
    }
    // println(changelogSec)
    return changelogSec
}
